---
description:
globs:
alwaysApply: false
---
# API交互规范规则

## Critical Rules

- API基础URL在前端环境配置中管理，不应硬编码在代码中
- 所有API响应必须遵循统一格式：`{ code: number, message: string, data: any }`
- API错误处理应统一，前端应捕获并显示适当的错误消息
- API参数命名应使用snake_case（如`active_only`而非`activeOnly`）
- API路径应使用REST风格：复数名词表示资源集合，ID表示具体资源
- GET请求用于获取数据，POST用于创建，PUT用于更新，DELETE用于删除
- 查询参数应用于筛选、排序和分页，不应用于传递复杂数据结构
- 批量操作应使用专门的端点（如`/api/shipping/batch`）
- 所有API调用应处理加载状态和错误状态
- 敏感数据应通过HTTPS传输，必要时使用加密

## Examples

<example>
// 前端API服务层 (services/api.ts)
async function fetchWithErrorHandling<T>(url: string, options?: RequestInit): Promise<T> {
  const envConfig = useEnvStore.getState()
  const method = options?.method || "GET"

  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })

    if (!response.ok) {
      throw new Error(`API请求失败: ${response.status} ${response.statusText}`)
    }

    const responseData = (await response.json()) as ApiResponseFormat<T>

    // 检查API响应中的code字段
    if (responseData.code !== 0) {
      throw new Error(responseData.message || "API请求失败")
    }

    return responseData.data
  } catch (error) {
    console.error(`请求失败: ${url}`, error)
    throw error
  }
}

// 调用示例
async function getCourierTypes(params?: FilterParams): Promise<CourierType[]> {
  const API_BASE_URL = useEnvStore.getState().apiBaseUrl
  const COURIERS_ENDPOINT = `${API_BASE_URL}/api/couriers`

  // 构建查询参数
  const queryParams = new URLSearchParams()
  if (params?.active_only) queryParams.append("active_only", "true")

  const queryString = queryParams.toString() ? `?${queryParams.toString()}` : ""
  return fetchWithErrorHandling<CourierType[]>(`${COURIERS_ENDPOINT}${queryString}`)
}
</example>

<example type="invalid">
// 不符合规范的API调用
async function getCourierTypes() {
  // 硬编码API URL
  const response = await fetch('http://localhost:3000/api/couriers')
  // 没有错误处理
  const data = await response.json()
  return data
}

// 不符合REST风格的API设计
// 使用动词而非名词
router.get('/api/getCouriers', (req, res) => {
  // ...
})

// 不符合命名约定
router.get('/api/couriers', (req, res) => {
  // 使用camelCase而非snake_case
  const isActive = req.query.isActive
  // ...
})

// 不一致的响应格式
router.get('/api/couriers', (req, res) => {
  // 直接返回数据，没有统一的响应格式
  res.json(results)
})
</example>
