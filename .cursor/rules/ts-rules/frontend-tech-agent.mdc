---
description:
globs:
alwaysApply: false
---
# 前端技术栈规则

## Critical Rules

- 前端使用 React 19+ 和 TypeScript 5+，所有组件文件应使用 `.tsx` 扩展名
- UI组件基于Radix UI和Shadcn UI系统，应继承其设计风格和使用模式
- 样式使用Tailwind CSS，避免编写原生CSS文件，除非绝对必要
- 状态管理主要使用Zustand和React Hook Form，避免引入Redux等其他状态管理库
- API调用应通过services目录下的服务函数进行，不应在组件中直接使用fetch
- 复杂组件逻辑应抽取到hooks目录下的自定义钩子中
- 所有类型定义应使用TypeScript接口或类型别名，避免使用any类型
- 应用路由遵循Next.js的App Router约定，页面文件应放在app目录下
- 共享UI组件应放在components/ui目录下，业务组件放在components目录根下
- 前端API请求应处理错误情况并显示适当的用户反馈

## Examples

<example>
// 符合规范的API服务函数 (services/api.ts)
export const api = {
  async getCourierTypes(params?: FilterParams): Promise<CourierType[]> {
    const envConfig = useEnvStore.getState()
    const API_BASE_URL = envConfig.apiBaseUrl
    
    const COURIERS_ENDPOINT = `${API_BASE_URL}/api/couriers`
    // 构建查询参数
    const queryParams = new URLSearchParams()
    if (params?.active_only) queryParams.append("active_only", "true")
    
    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : ""
    return fetchWithErrorHandling<CourierType[]>(`${COURIERS_ENDPOINT}${queryString}`)
  }
}

// 符合规范的自定义钩子 (hooks/use-courier-types.ts)
export function useCourierTypes(options?: { activeOnly?: boolean }) {
  const [courierTypes, setCourierTypes] = useState<CourierType[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<Error | null>(null)
  
  useEffect(() => {
    const fetchCourierTypes = async () => {
      try {
        setIsLoading(true)
        const data = await api.getCourierTypes({ active_only: options?.activeOnly })
        setCourierTypes(data)
      } catch (err) {
        setError(err instanceof Error ? err : new Error('Unknown error'))
      } finally {
        setIsLoading(false)
      }
    }
    
    fetchCourierTypes()
  }, [options?.activeOnly])
  
  return { courierTypes, isLoading, error, refetch: fetchCourierTypes }
}
</example>

<example type="invalid">
// 不符合规范的API调用方式 - 直接在组件中使用fetch
function CourierTypeList() {
  const [courierTypes, setCourierTypes] = useState([])
  
  useEffect(() => {
    fetch('http://localhost:3000/api/couriers')
      .then(res => res.json())
      .then(data => setCourierTypes(data))
  }, [])
  
  return (...)
}

// 不符合规范的类型使用 - 使用any类型
function processData(data: any) {
  // 处理数据
}

// 不符合规范的样式使用 - 使用内联样式而非Tailwind
function Button() {
  return (
    <button style={{ backgroundColor: 'blue', color: 'white', padding: '10px' }}>
      Click me
    </button>
  )
}
</example>
