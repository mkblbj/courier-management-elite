---
description:
globs:
alwaysApply: false
---
# 后端技术栈规则

## Critical Rules

- 后端使用Node.js (22.2+)和Express.js框架，API应遵循RESTful设计原则
- 数据库采用MySQL (8.4+)，使用mysql2驱动连接，应正确处理连接池和事务
- 代码结构应遵循MVC模式：controllers处理业务逻辑，models负责数据操作，routes定义API路由
- API响应应使用统一的JSON格式：`{ code: number, message: string, data: any }`
- API错误处理应使用中间件统一处理，确保前端收到一致的错误响应格式
- 路由参数和请求体应使用express-validator进行验证，确保数据格式正确
- 数据库迁移应通过专用脚本管理，确保数据库结构可重复部署
- 环境配置应使用dotenv管理，不同环境的配置不应硬编码在代码中
- API路由应组织在routes目录下，并通过index.js统一导出
- 所有异步操作应使用async/await或Promise，避免回调地狱

## Examples

<example>
// 符合规范的控制器 (controllers/courierController.js)
const CourierModel = require('../models/courierModel');
const { validationResult } = require('express-validator');

// 获取所有快递公司
exports.getAllCouriers = async (req, res, next) => {
  try {
    const activeOnly = req.query.active_only === 'true';
    const couriers = await CourierModel.getAll(activeOnly);
    
    res.json({
      code: 0,
      message: '获取成功',
      data: couriers
    });
  } catch (error) {
    next(error);
  }
};

// 创建快递公司
exports.createCourier = async (req, res, next) => {
  try {
    // 验证请求
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        code: 400,
        message: '请求参数错误',
        data: errors.array()
      });
    }
    
    const { name, code, remark, is_active } = req.body;
    const newCourier = await CourierModel.create({ 
      name, 
      code, 
      remark, 
      is_active: is_active ? 1 : 0 
    });
    
    res.status(201).json({
      code: 0,
      message: '创建成功',
      data: newCourier
    });
  } catch (error) {
    next(error);
  }
};
</example>

<example type="invalid">
// 不符合规范的控制器 - 混合了路由和控制器逻辑
const express = require('express');
const router = express.Router();
const db = require('../db');

// 不分离控制器和路由
router.get('/api/couriers', (req, res) => {
  // 直接在路由中执行数据库查询
  db.query('SELECT * FROM couriers', (err, results) => {
    if (err) {
      // 不一致的错误处理
      return res.status(500).send(err);
    }
    // 不一致的响应格式
    res.send(results);
  });
});

// 不使用async/await处理异步
router.post('/api/couriers', (req, res) => {
  const { name, code } = req.body;
  // 没有输入验证
  db.query(
    'INSERT INTO couriers (name, code) VALUES (?, ?)',
    [name, code],
    (err, result) => {
      if (err) return res.status(500).send(err);
      res.send({ id: result.insertId });
    }
  );
});

module.exports = router;
</example>
